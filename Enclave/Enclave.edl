/*
 * Copyright (C) 2011-2019 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */
    include "sgx_trts.h"
    include "sgx_utils.h"
    include "sgx_tkey_exchange.h"

    from "sgx_tkey_exchange.edl" import *;

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    // from "Edger8rSyntax/Types.edl" import *;
    // from "Edger8rSyntax/Pointers.edl" import *;
    // from "Edger8rSyntax/Arrays.edl" import *;
    // from "Edger8rSyntax/Functions.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    //不可信环境下调用可信函数
    trusted{
        include "../App/Tools/config.h"

        public void msi([in,count=n] size_t ***X, [in,count=n] size_t **len, [out,count=len_min] size_t *out, size_t n, size_t len_min, size_t n_bucket);

        public sgx_status_t get_report([out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info);

        public size_t get_pse_manifest_size();

        public sgx_status_t get_pse_manifest([out, count=sz] char *buf, size_t sz);

        public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse,
            [out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

        public sgx_status_t enclave_ra_init_def(int b_pse,
            [out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

        public sgx_status_t enclave_ra_get_key_hash(
            [out] sgx_status_t *get_keys_status, sgx_ra_context_t ctx,
            sgx_ra_key_type_t type, [out] sgx_sha256_hash_t *hash);

        public sgx_status_t enclave_ra_close(sgx_ra_context_t ctx);


     };
    //在可信环境调用不可信函数
    untrusted {
        include "../App/Tools/config.h"

        //void ocall_print_string([in, string] const char *str);
    };

};



